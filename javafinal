// === Main.java ===
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDate;
import java.time.LocalDateTime;

public class Main extends Application {
    private List<Course> courses = new ArrayList<>();
    private List<Assignment> assignments = new ArrayList<>();
    private List<StudySession> studySessions = new ArrayList<>();
    private VBox dashboardBox;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Study Planner & Homework Tracker");

        dashboardBox = new VBox(10);
        dashboardBox.setPadding(new Insets(10));

        Button addCourseBtn = new Button("Add Course");
        Button addAssignmentBtn = new Button("Add Assignment");
        Button addStudySessionBtn = new Button("Add Study Session");

        addCourseBtn.setOnAction(e -> showAddCourseDialog());
        addAssignmentBtn.setOnAction(e -> showAddAssignmentDialog());
        addStudySessionBtn.setOnAction(e -> showAddStudySessionDialog());

        HBox buttonBox = new HBox(10, addCourseBtn, addAssignmentBtn, addStudySessionBtn);
        dashboardBox.getChildren().add(buttonBox);
        updateDashboard();

        Scene scene = new Scene(dashboardBox, 600, 500);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void showAddCourseDialog() {
        Dialog<Course> dialog = new Dialog<>();
        dialog.setTitle("Add Course");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(10));

        TextField nameField = new TextField();
        TextField instructorField = new TextField();
        TextField scheduleField = new TextField();

        grid.add(new Label("Course Name:"), 0, 0);
        grid.add(nameField, 1, 0);
        grid.add(new Label("Instructor:"), 0, 1);
        grid.add(instructorField, 1, 1);
        grid.add(new Label("Schedule:"), 0, 2);
        grid.add(scheduleField, 1, 2);

        dialog.getDialogPane().setContent(grid);
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == ButtonType.OK) {
                return new Course(nameField.getText(), instructorField.getText(), scheduleField.getText());
            }
            return null;
        });

        dialog.showAndWait().ifPresent(course -> {
            courses.add(course);
            updateDashboard();
        });
    }

    private void showAddAssignmentDialog() {
        if (courses.isEmpty()) {
            showAlert("No courses available. Please add a course first.");
            return;
        }

        Dialog<Assignment> dialog = new Dialog<>();
        dialog.setTitle("Add Assignment");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(10));

        TextField titleField = new TextField();
        ComboBox<Course> courseBox = new ComboBox<>();
        courseBox.getItems().addAll(courses);
        DatePicker dueDatePicker = new DatePicker();
        TextField descField = new TextField();
        ComboBox<String> priorityBox = new ComboBox<>();
        priorityBox.getItems().addAll("Low", "Medium", "High");

        grid.add(new Label("Title:"), 0, 0);
        grid.add(titleField, 1, 0);
        grid.add(new Label("Course:"), 0, 1);
        grid.add(courseBox, 1, 1);
        grid.add(new Label("Due Date:"), 0, 2);
        grid.add(dueDatePicker, 1, 2);
        grid.add(new Label("Description:"), 0, 3);
        grid.add(descField, 1, 3);
        grid.add(new Label("Priority:"), 0, 4);
        grid.add(priorityBox, 1, 4);

        dialog.getDialogPane().setContent(grid);
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        dialog.setResultConverter(button -> {
            if (button == ButtonType.OK) {
                return new Assignment(titleField.getText(), courseBox.getValue(), dueDatePicker.getValue(),
                        descField.getText(), priorityBox.getValue());
            }
            return null;
        });

        dialog.showAndWait().ifPresent(assignment -> {
            assignments.add(assignment);
            updateDashboard();
        });
    }

    private void showAddStudySessionDialog() {
        if (courses.isEmpty()) {
            showAlert("No courses available. Please add a course first.");
            return;
        }

        Dialog<StudySession> dialog = new Dialog<>();
        dialog.setTitle("Add Study Session");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(10));

        ComboBox<Course> courseBox = new ComboBox<>();
        courseBox.getItems().addAll(courses);
        DatePicker startDate = new DatePicker();
        TextField startTime = new TextField();
        DatePicker endDate = new DatePicker();
        TextField endTime = new TextField();

        grid.add(new Label("Course:"), 0, 0);
        grid.add(courseBox, 1, 0);
        grid.add(new Label("Start Date:"), 0, 1);
        grid.add(startDate, 1, 1);
        grid.add(new Label("Start Time (HH:MM):"), 0, 2);
        grid.add(startTime, 1, 2);
        grid.add(new Label("End Date:"), 0, 3);
        grid.add(endDate, 1, 3);
        grid.add(new Label("End Time (HH:MM):"), 0, 4);
        grid.add(endTime, 1, 4);

        dialog.getDialogPane().setContent(grid);
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        dialog.setResultConverter(button -> {
            if (button == ButtonType.OK) {
                try {
                    LocalDateTime start = LocalDateTime.of(startDate.getValue(),
                            java.time.LocalTime.parse(startTime.getText()));
                    LocalDateTime end = LocalDateTime.of(endDate.getValue(),
                            java.time.LocalTime.parse(endTime.getText()));
                    return new StudySession(courseBox.getValue(), start, end);
                } catch (Exception e) {
                    showAlert("Invalid date/time format.");
                    return null;
                }
            }
            return null;
        });

        dialog.showAndWait().ifPresent(session -> {
            studySessions.add(session);
            updateDashboard();
        });
    }

    private void updateDashboard() {
        dashboardBox.getChildren().removeIf(node -> node instanceof ListView);

        ListView<String> listView = new ListView<>();
        for (Assignment a : assignments) {
            listView.getItems().add("Assignment: " + a);
        }
        for (StudySession s : studySessions) {
            listView.getItems().add("Study Session: " + s);
        }

        dashboardBox.getChildren().add(listView);
    }

    private void showAlert(String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setContentText(msg);
        alert.showAndWait();
    }
}
